"use strict";(self.webpackChunk_nilfoundation_ui_kit=self.webpackChunk_nilfoundation_ui_kit||[]).push([[5739],{"./src/shared/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Bi:()=>_theme__WEBPACK_IMPORTED_MODULE_0__.Bi,L_:()=>_theme__WEBPACK_IMPORTED_MODULE_0__.L_,oA:()=>_theme__WEBPACK_IMPORTED_MODULE_0__.oA});var _theme__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/shared/theme/index.ts")},"./src/components/accordion/Accordion.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Template:()=>Template,base:()=>base,default:()=>Accordion_stories,withDescription:()=>withDescription,withIcon:()=>withIcon,withoutAccordion:()=>withoutAccordion});var react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),accordion=__webpack_require__("./node_modules/baseui/esm/accordion/accordion.js");var getMergedOverrides=__webpack_require__("./src/shared/utils/getMergedOverrides.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const Accordion=_ref=>{let{overrides:baseOverrides,...props}=_ref;const accordionOverrides={PanelContainer:{style:()=>({borderBottom:"none",marginTop:"4px"})}},overrides=(0,getMergedOverrides.D)(accordionOverrides,baseOverrides);return(0,jsx_runtime.jsx)(accordion.Z,{...props,overrides})};Accordion.displayName="Accordion";const accordion_Accordion=Accordion;try{Accordion.displayName="Accordion",Accordion.__docgenInfo={description:"",displayName:"Accordion",props:{accordion:{defaultValue:null,description:"Determines how many panels may be expanded at a time. If set to\ntrue it will collapse a current panel when a new panel is expanded.\nIf set to false more than one panel may be expanded at a time.",name:"accordion",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"Accordion expandable items. See Panel API below for reference.",name:"children",required:!0,type:{name:"ReactNode"}},disabled:{defaultValue:null,description:"If set to true all its children panels will be disabled from toggling.",name:"disabled",required:!1,type:{name:"boolean"}},initialState:{defaultValue:null,description:"",name:"initialState",required:!1,type:{name:"AccordionState"}},onChange:{defaultValue:null,description:"Handler called each time a panel is toggled. expanded prop is an array\nof Panel keys that are currently expanded.",name:"onChange",required:!1,type:{name:"AccordionOnChangeHandler"}},overrides:{defaultValue:null,description:"",name:"overrides",required:!1,type:{name:"AccordionOverrides"}},stateReducer:{defaultValue:null,description:"Handler called each time the component state changes.\nUsed to override default state-change functionality.",name:"stateReducer",required:!0,type:{name:"StateReducer"}},renderAll:{defaultValue:null,description:"Allows users to render all child content whether a panel is expanded or not\nfor SEO purposed",name:"renderAll",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/accordion/Accordion.tsx#Accordion"]={docgenInfo:Accordion.__docgenInfo,name:"Accordion",path:"src/components/accordion/Accordion.tsx#Accordion"})}catch(__react_docgen_typescript_loader_error){}var panel=__webpack_require__("./node_modules/baseui/esm/accordion/panel.js"),styled=__webpack_require__("./node_modules/baseui/esm/styles/styled.js"),shared=__webpack_require__("./src/shared/index.ts"),typography=__webpack_require__("./node_modules/baseui/esm/typography/index.js");const containerStyles={display:"flex",alignItems:"center"},iconStyles={marginRight:"16px"},descriptionStyles={marginBottom:"0",marginTop:"4px"},PanelTitle=_ref=>{let{title,description,icon}=_ref;const[css]=(0,styled.hQ)();return(0,jsx_runtime.jsxs)("div",{className:css(containerStyles),children:[icon&&react.cloneElement(icon,{size:"20px",color:shared.Bi.white,className:css(iconStyles)}),(0,jsx_runtime.jsxs)("div",{children:[title,description&&(0,jsx_runtime.jsx)(typography.aM,{color:shared.Bi.white,className:css(descriptionStyles),children:description})]})]})};PanelTitle.displayName="PanelTitle";const ui_PanelTitle=PanelTitle;try{PanelTitle.displayName="PanelTitle",PanelTitle.__docgenInfo={description:"",displayName:"PanelTitle",props:{title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"ReactNode"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"ReactNode"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/accordion/ui/PanelTitle.tsx#PanelTitle"]={docgenInfo:PanelTitle.__docgenInfo,name:"PanelTitle",path:"src/components/accordion/ui/PanelTitle.tsx#PanelTitle"})}catch(__react_docgen_typescript_loader_error){}const Panel=_ref=>{let{icon,title,description,...props}=_ref;return(0,jsx_runtime.jsx)(panel.Z,{...props,title:(0,jsx_runtime.jsx)(ui_PanelTitle,{title,icon,description})})};Panel.displayName="Panel";const accordion_Panel=Panel;try{Panel.displayName="Panel",Panel.__docgenInfo={description:"",displayName:"Panel",props:{children:{defaultValue:null,description:"The content visible when Panel is expanded.",name:"children",required:!0,type:{name:"ReactNode"}},disabled:{defaultValue:null,description:"Defaults to the disabled value provided by the parent Accordion component.",name:"disabled",required:!1,type:{name:"boolean"}},"aria-controls":{defaultValue:null,description:"Id for a panel, when provided populates aria-controls\nattribute for panel button and content",name:"aria-controls",required:!1,type:{name:"string"}},key:{defaultValue:null,description:"The key of a Panel. Used to maintain list of expanded panels.\nMust be unique across children of the Accordion.",name:"key",required:!1,type:{name:"Key"}},onChange:{defaultValue:null,description:"Handler for individual Panel change events.",name:"onChange",required:!1,type:{name:"OnChangeHandler"}},onClick:{defaultValue:null,description:"Handler for the Header's click events.",name:"onClick",required:!1,type:{name:"((e: Event) => unknown)"}},onKeyDown:{defaultValue:null,description:"Handler for the Header's keyDown events.",name:"onKeyDown",required:!1,type:{name:"((e: KeyboardEvent) => unknown)"}},overrides:{defaultValue:null,description:"",name:"overrides",required:!1,type:{name:"PanelOverrides"}},title:{defaultValue:null,description:"The title of an accordion panel.",name:"title",required:!1,type:{name:"ReactNode"}},renderPanelContent:{defaultValue:null,description:"Allows users to render all child content whether a panel is expanded or not\nfor SEO purposed",name:"renderPanelContent",required:!1,type:{name:"boolean"}},renderAll:{defaultValue:null,description:"Allows users to render all child content whether a panel is expanded or not\nfor SEO purposed",name:"renderAll",required:!1,type:{name:"boolean"}},expanded:{defaultValue:null,description:"Defines if the panel is expanded. If set to true the panel is rendered expanded.",name:"expanded",required:!1,type:{name:"boolean"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"ReactNode"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/accordion/Panel.tsx#Panel"]={docgenInfo:Panel.__docgenInfo,name:"Panel",path:"src/components/accordion/Panel.tsx#Panel"})}catch(__react_docgen_typescript_loader_error){}var filter=__webpack_require__("./node_modules/baseui/esm/icon/filter.js");const Template=({isIcon,isDescription,...args})=>{const _components=Object.assign({div:"div"},(0,lib.ah)());return(0,jsx_runtime.jsx)(_components.div,{style:{maxWidth:"530px"},children:(0,jsx_runtime.jsxs)(accordion_Accordion,{...args,children:[(0,jsx_runtime.jsx)(accordion_Panel,{title:"Panel 1",description:isDescription&&"Comment",icon:isIcon&&(0,jsx_runtime.jsx)(filter.Z,{}),children:"Content 1"}),(0,jsx_runtime.jsx)(accordion_Panel,{title:"Panel 2",description:isDescription&&"Comment",icon:isIcon&&(0,jsx_runtime.jsx)(filter.Z,{}),children:"Content 2"}),(0,jsx_runtime.jsx)(accordion_Panel,{title:"Panel 3",description:isDescription&&"Comment",icon:isIcon&&(0,jsx_runtime.jsx)(filter.Z,{}),children:"Content 3"})]})})};function _createMdxContent(props){const _components=Object.assign({h1:"h1",h3:"h3",p:"p",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Disclosure/Accordion",component:accordion_Accordion}),"\n","\n",(0,jsx_runtime.jsx)(_components.h1,{id:"accordion",children:"Accordion"}),"\n",(0,jsx_runtime.jsxs)(dist.Xz,{isColumn:!0,children:[(0,jsx_runtime.jsx)(dist.oG,{name:"Base",args:{},children:Template.bind({})}),(0,jsx_runtime.jsx)(dist.oG,{name:"Without accordion",args:{accordion:!1},children:Template.bind({})}),(0,jsx_runtime.jsx)(dist.oG,{name:"With icon",args:{isIcon:!0},children:Template.bind({})}),(0,jsx_runtime.jsx)(dist.oG,{name:"With Description",args:{isDescription:!0},children:Template.bind({})})]}),"\n",(0,jsx_runtime.jsx)(dist.$4,{of:accordion_Accordion}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"usage",children:"Usage:"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["To use, import the component ",(0,jsx_runtime.jsx)(_components.code,{children:"Accordion"})," from ",(0,jsx_runtime.jsx)(_components.code,{children:"@nilfoundation/ui-kit"}),"."]}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{language:"tsx",dark:!0,format:!0,code:'\n        import {Accordion, Panel, Filter} from "@nilfoundation/ui-kit";\n        ...\n        <Accordion>\n            <Panel title="Panel 1">Content 1</Panel>\n            <Panel title="Panel 2">Content 2</Panel>\n            <Panel title="Panel 3">Content 3</Panel>\n        </Accordion>\n        // With icon\n        <Accordion>\n            <Panel title="Panel 1" icon={<Filter />}>Content 1</Panel>\n            <Panel title="Panel 2" icon={<Filter />}>Content 2</Panel>\n            <Panel title="Panel 3" icon={<Filter />}>Content 3</Panel>\n        </Accordion>\n        // With description\n        <Accordion>\n            <Panel title="Panel 1" description="Comment 1">Content 1</Panel>\n            <Panel title="Panel 2" description="Comment 2">Content 2</Panel>\n            <Panel title="Panel 3" description="Comment 3">Content 3</Panel>\n        </Accordion>\n  '})]})}const base=Template.bind({});base.storyName="Base",base.args={},base.parameters={storySource:{source:'({\n  isIcon,\n  isDescription,\n  ...args\n}) => {\n  const description = "Comment";\n  return <div style={{\n    maxWidth: "530px"\n  }}>\n      <Accordion {...args}>\n        <Panel title="Panel 1" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 1\n        </Panel>\n        <Panel title="Panel 2" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 2\n        </Panel>\n        <Panel title="Panel 3" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 3\n        </Panel>\n      </Accordion>\n    </div>;\n}'}};const withoutAccordion=Template.bind({});withoutAccordion.storyName="Without accordion",withoutAccordion.args={accordion:!1},withoutAccordion.parameters={storySource:{source:'({\n  isIcon,\n  isDescription,\n  ...args\n}) => {\n  const description = "Comment";\n  return <div style={{\n    maxWidth: "530px"\n  }}>\n      <Accordion {...args}>\n        <Panel title="Panel 1" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 1\n        </Panel>\n        <Panel title="Panel 2" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 2\n        </Panel>\n        <Panel title="Panel 3" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 3\n        </Panel>\n      </Accordion>\n    </div>;\n}'}};const withIcon=Template.bind({});withIcon.storyName="With icon",withIcon.args={isIcon:!0},withIcon.parameters={storySource:{source:'({\n  isIcon,\n  isDescription,\n  ...args\n}) => {\n  const description = "Comment";\n  return <div style={{\n    maxWidth: "530px"\n  }}>\n      <Accordion {...args}>\n        <Panel title="Panel 1" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 1\n        </Panel>\n        <Panel title="Panel 2" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 2\n        </Panel>\n        <Panel title="Panel 3" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 3\n        </Panel>\n      </Accordion>\n    </div>;\n}'}};const withDescription=Template.bind({});withDescription.storyName="With Description",withDescription.args={isDescription:!0},withDescription.parameters={storySource:{source:'({\n  isIcon,\n  isDescription,\n  ...args\n}) => {\n  const description = "Comment";\n  return <div style={{\n    maxWidth: "530px"\n  }}>\n      <Accordion {...args}>\n        <Panel title="Panel 1" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 1\n        </Panel>\n        <Panel title="Panel 2" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 2\n        </Panel>\n        <Panel title="Panel 3" description={isDescription && description} icon={isIcon && <Filter />}>\n          Content 3\n        </Panel>\n      </Accordion>\n    </div>;\n}'}};const componentMeta={title:"Disclosure/Accordion",component:accordion_Accordion,tags:["stories-mdx"],includeStories:["base","withoutAccordion","withIcon","withDescription"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const Accordion_stories=componentMeta}}]);