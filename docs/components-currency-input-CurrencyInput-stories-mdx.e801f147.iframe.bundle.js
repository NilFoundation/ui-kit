"use strict";(self.webpackChunk_nilfoundation_ui_kit=self.webpackChunk_nilfoundation_ui_kit||[]).push([[1748],{"./src/components/currency-input/CurrencyInput.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Template:()=>Template,__namedExportsOrder:()=>__namedExportsOrder,default:()=>CurrencyInput_stories,disabled:()=>disabled,error:()=>error,medium:()=>medium,secondary:()=>secondary,secondaryDisabled:()=>secondaryDisabled,small:()=>small,withStartEnhancer:()=>withStartEnhancer});var react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),form_control=__webpack_require__("./src/components/form-control/index.ts"),input=__webpack_require__("./src/components/input/index.ts"),components_select=__webpack_require__("./src/components/select/index.ts"),getMergedOverrides=__webpack_require__("./src/shared/utils/getMergedOverrides.ts");const inputOverrides={Input:{style:{"::-webkit-outer-spin-button":{WebkitAppearance:"none",margin:0},"::-webkit-inner-spin-button":{WebkitAppearance:"none",margin:0},"-moz-appearance":"textfield"}}},selectOverrides={ControlContainer:{style:{width:"100px",backgroundColor:"transparent",boxShadow:"none",":has(input:focus-within)":{boxShadow:"none"},":hover":{backgroundColor:"transparent"}}}},mapInputSizeToSelectSize=size=>{switch(size){case input.x0.small:return components_select.zI.small;case input.x0.medium:return components_select.zI.medium}};var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const CurrencyInput=_ref=>{let{value,onChange,currencies,className,label,disabled=!1,caption,placeholder,overrides,size=input.x0.medium,startEnhancer,error,required,kind}=_ref;const mergedInputOverrides=(0,getMergedOverrides.O)(inputOverrides,overrides);return(0,jsx_runtime.jsx)("div",{className,children:(0,jsx_runtime.jsx)(form_control.M,{label,caption,error,required,size,children:(0,jsx_runtime.jsx)(input.pd,{startEnhancer,disabled,overrides:mergedInputOverrides,placeholder,type:"number",value:value.amount,onChange:e=>{onChange&&onChange({currency:value.currency,amount:e.currentTarget.value})},size,kind,endEnhancer:(0,jsx_runtime.jsx)(components_select.l6,{disabled,options:currencies.map((currency=>({label:currency,id:currency}))),searchable:!1,overrides:selectOverrides,placeholder:"",clearable:!1,onChange:params=>{onChange&&onChange({currency:params.value[0].label,amount:value.amount})},value:[{label:value.currency,id:value.currency}],size:mapInputSizeToSelectSize(size),error:void 0!==error})})})})};CurrencyInput.displayName="CurrencyInput";const currency_input_CurrencyInput=CurrencyInput;try{CurrencyInput.displayName="CurrencyInput",CurrencyInput.__docgenInfo={description:"",displayName:"CurrencyInput",props:{overrides:{defaultValue:null,description:"",name:"overrides",required:!1,type:{name:"({ Root?: Override<any>; StartEnhancer?: Override<any>; EndEnhancer?: Override<any> | undefined; } & BaseInputOverrides) | undefined"}},kind:{defaultValue:null,description:"",name:"kind",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'}]}},disabled:{defaultValue:{value:"false"},description:"Renders component in 'disabled' state.",name:"disabled",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"INPUT_SIZE.medium"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'}]}},startEnhancer:{defaultValue:null,description:"An input helper rendered before and attached to the input field.",name:"startEnhancer",required:!1,type:{name:"ReactNode | ((props: SharedProps) => ReactNode)"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"A label rendered above the input field.",name:"label",required:!1,type:{name:"ReactNode | ((props: {}) => ReactNode)"}},error:{defaultValue:null,description:"Error state of the input. If an error prop passed it will be rendered in place of caption as an error message.",name:"error",required:!1,type:{name:"ReactNode | ((props: {}) => ReactNode)"}},required:{defaultValue:null,description:"",name:"required",required:!1,type:{name:"boolean"}},caption:{defaultValue:null,description:"A caption rendered below the input field.",name:"caption",required:!1,type:{name:"ReactNode | ((props: {}) => ReactNode)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"{ currency: Currency; amount: string; }"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((value: { currency: Currency; amount: string; }) => void)"}},currencies:{defaultValue:null,description:"",name:"currencies",required:!0,type:{name:"Currency[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/currency-input/CurrencyInput.tsx#CurrencyInput"]={docgenInfo:CurrencyInput.__docgenInfo,name:"CurrencyInput",path:"src/components/currency-input/CurrencyInput.tsx#CurrencyInput"})}catch(__react_docgen_typescript_loader_error){}var styled=__webpack_require__("./node_modules/baseui/esm/styles/styled.js"),icons=__webpack_require__("./src/components/icons/index.ts");const Template=({...args})=>{const _components=Object.assign({div:"div"},(0,lib.RP)()),[value,setValue]=(0,react.useState)({currency:"USDT",amount:""}),[css]=(0,styled.c6)();return(0,jsx_runtime.jsx)(_components.div,{className:css({width:"400px"}),children:(0,jsx_runtime.jsx)(currency_input_CurrencyInput,{...args,value,currencies:["USDT","BTC","ETH","BNB","ADA","XRP"],onChange:({currency,amount})=>{setValue({currency,amount})}})})};function _createMdxContent(props){const _components=Object.assign({h1:"h1",h3:"h3",p:"p",code:"code"},(0,lib.RP)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{title:"Form/CurrencyInput",component:currency_input_CurrencyInput}),"\n","\n",(0,jsx_runtime.jsx)(_components.h1,{id:"input",children:"Input"}),"\n",(0,jsx_runtime.jsxs)(dist.Hl,{isColumn:!0,children:[(0,jsx_runtime.jsx)(dist.gG,{name:"Small",args:{placeholder:"Input Field",size:input.x0.small},children:Template.bind({})}),(0,jsx_runtime.jsx)(dist.gG,{name:"Medium",args:{placeholder:"Input Field"},children:Template.bind({})}),(0,jsx_runtime.jsx)(dist.gG,{name:"Disabled",args:{placeholder:"Disabled Field",disabled:!0},children:Template.bind({})}),(0,jsx_runtime.jsx)(dist.gG,{name:"Secondary disabled",args:{placeholder:"Disabled Secondary Small",disabled:!0,size:input.x0.small,kind:input.sC.secondary},children:Template.bind({})}),(0,jsx_runtime.jsx)(dist.gG,{name:"Secondary",args:{placeholder:"Secondary input",kind:input.sC.secondary},children:Template.bind({})}),(0,jsx_runtime.jsx)(dist.gG,{name:"Error",args:{placeholder:"Error Field",error:!0},children:Template.bind({})}),(0,jsx_runtime.jsx)(dist.gG,{name:"With Start Enhancer",args:{placeholder:"With start enchancer",startEnhancer:(0,jsx_runtime.jsx)(icons.C3,{})},children:Template.bind({})})]}),"\n",(0,jsx_runtime.jsx)(dist.uY,{of:currency_input_CurrencyInput}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"usage",children:"Usage:"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["To use, import the component ",(0,jsx_runtime.jsx)(_components.code,{children:"CurrencyInput"})," from ",(0,jsx_runtime.jsx)(_components.code,{children:"@nilfoundation/ui-kit"}),"."]}),"\n",(0,jsx_runtime.jsx)(dist.kL,{language:"tsx",dark:!0,format:!0,code:'\n        import {CurrencyInput} from "@nilfoundation/ui-kit";\n        ...\n        const onChange = ({ currency, amount }) => {\n          setValue({ currency, amount });\n        };\n\n        const currencies = [\n          "USDT",\n          "BTC",\n          "ETH",\n          "BNB",\n          "ADA",\n          "XRP",\n        ];\n\n        <CurrencyInput placeholder="Currency input field" size={INPUT_SIZE.small} currencies={currencies} onChange={onChange} />\n\n'})]})}const small=Template.bind({});small.storyName="Small",small.args={placeholder:"Input Field",size:input.x0.small},small.parameters={storySource:{source:'({\n  ...args\n}) => {\n  const [value, setValue] = useState({\n    currency: "USDT",\n    amount: ""\n  });\n  const [css] = useStyletron();\n  const currencies = ["USDT", "BTC", "ETH", "BNB", "ADA", "XRP"];\n  const onChange = ({\n    currency,\n    amount\n  }) => {\n    setValue({\n      currency,\n      amount\n    });\n  };\n  return <div className={css({\n    width: "400px"\n  })}>\n  <CurrencyInput {...args} value={value} currencies={currencies} onChange={onChange} />\n  </div>;\n}'}};const medium=Template.bind({});medium.storyName="Medium",medium.args={placeholder:"Input Field"},medium.parameters={storySource:{source:'({\n  ...args\n}) => {\n  const [value, setValue] = useState({\n    currency: "USDT",\n    amount: ""\n  });\n  const [css] = useStyletron();\n  const currencies = ["USDT", "BTC", "ETH", "BNB", "ADA", "XRP"];\n  const onChange = ({\n    currency,\n    amount\n  }) => {\n    setValue({\n      currency,\n      amount\n    });\n  };\n  return <div className={css({\n    width: "400px"\n  })}>\n  <CurrencyInput {...args} value={value} currencies={currencies} onChange={onChange} />\n  </div>;\n}'}};const disabled=Template.bind({});disabled.storyName="Disabled",disabled.args={placeholder:"Disabled Field",disabled:!0},disabled.parameters={storySource:{source:'({\n  ...args\n}) => {\n  const [value, setValue] = useState({\n    currency: "USDT",\n    amount: ""\n  });\n  const [css] = useStyletron();\n  const currencies = ["USDT", "BTC", "ETH", "BNB", "ADA", "XRP"];\n  const onChange = ({\n    currency,\n    amount\n  }) => {\n    setValue({\n      currency,\n      amount\n    });\n  };\n  return <div className={css({\n    width: "400px"\n  })}>\n  <CurrencyInput {...args} value={value} currencies={currencies} onChange={onChange} />\n  </div>;\n}'}};const secondaryDisabled=Template.bind({});secondaryDisabled.storyName="Secondary disabled",secondaryDisabled.args={placeholder:"Disabled Secondary Small",disabled:!0,size:input.x0.small,kind:input.sC.secondary},secondaryDisabled.parameters={storySource:{source:'({\n  ...args\n}) => {\n  const [value, setValue] = useState({\n    currency: "USDT",\n    amount: ""\n  });\n  const [css] = useStyletron();\n  const currencies = ["USDT", "BTC", "ETH", "BNB", "ADA", "XRP"];\n  const onChange = ({\n    currency,\n    amount\n  }) => {\n    setValue({\n      currency,\n      amount\n    });\n  };\n  return <div className={css({\n    width: "400px"\n  })}>\n  <CurrencyInput {...args} value={value} currencies={currencies} onChange={onChange} />\n  </div>;\n}'}};const secondary=Template.bind({});secondary.storyName="Secondary",secondary.args={placeholder:"Secondary input",kind:input.sC.secondary},secondary.parameters={storySource:{source:'({\n  ...args\n}) => {\n  const [value, setValue] = useState({\n    currency: "USDT",\n    amount: ""\n  });\n  const [css] = useStyletron();\n  const currencies = ["USDT", "BTC", "ETH", "BNB", "ADA", "XRP"];\n  const onChange = ({\n    currency,\n    amount\n  }) => {\n    setValue({\n      currency,\n      amount\n    });\n  };\n  return <div className={css({\n    width: "400px"\n  })}>\n  <CurrencyInput {...args} value={value} currencies={currencies} onChange={onChange} />\n  </div>;\n}'}};const error=Template.bind({});error.storyName="Error",error.args={placeholder:"Error Field",error:!0},error.parameters={storySource:{source:'({\n  ...args\n}) => {\n  const [value, setValue] = useState({\n    currency: "USDT",\n    amount: ""\n  });\n  const [css] = useStyletron();\n  const currencies = ["USDT", "BTC", "ETH", "BNB", "ADA", "XRP"];\n  const onChange = ({\n    currency,\n    amount\n  }) => {\n    setValue({\n      currency,\n      amount\n    });\n  };\n  return <div className={css({\n    width: "400px"\n  })}>\n  <CurrencyInput {...args} value={value} currencies={currencies} onChange={onChange} />\n  </div>;\n}'}};const withStartEnhancer=Template.bind({});withStartEnhancer.storyName="With Start Enhancer",withStartEnhancer.args={placeholder:"With start enchancer",startEnhancer:(0,jsx_runtime.jsx)(icons.C3,{})},withStartEnhancer.parameters={storySource:{source:'({\n  ...args\n}) => {\n  const [value, setValue] = useState({\n    currency: "USDT",\n    amount: ""\n  });\n  const [css] = useStyletron();\n  const currencies = ["USDT", "BTC", "ETH", "BNB", "ADA", "XRP"];\n  const onChange = ({\n    currency,\n    amount\n  }) => {\n    setValue({\n      currency,\n      amount\n    });\n  };\n  return <div className={css({\n    width: "400px"\n  })}>\n  <CurrencyInput {...args} value={value} currencies={currencies} onChange={onChange} />\n  </div>;\n}'}};const componentMeta={title:"Form/CurrencyInput",component:currency_input_CurrencyInput,tags:["stories-mdx"],includeStories:["small","medium","disabled","secondaryDisabled","secondary","error","withStartEnhancer"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const CurrencyInput_stories=componentMeta,__namedExportsOrder=["Template","small","medium","disabled","secondaryDisabled","secondary","error","withStartEnhancer"]}}]);